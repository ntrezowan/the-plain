{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "1": {
   "Fn::Equals": [
    "1",
    {
     "Ref": "numberOfAdditionalNics"
    }
   ]
  },
  "2": {
   "Fn::Equals": [
    "2",
    {
     "Ref": "numberOfAdditionalNics"
    }
   ]
  },
  "3": {
   "Fn::Equals": [
    "3",
    {
     "Ref": "numberOfAdditionalNics"
    }
   ]
  },
  "4": {
   "Fn::Equals": [
    "4",
    {
     "Ref": "numberOfAdditionalNics"
    }
   ]
  },
  "5": {
   "Fn::Equals": [
    "5",
    {
     "Ref": "numberOfAdditionalNics"
    }
   ]
  },
  "createNic3": {
   "Fn::Or": [
    {
     "Condition": "1"
    },
    {
     "Condition": "2"
    },
    {
     "Condition": "3"
    },
    {
     "Condition": "4"
    },
    {
     "Condition": "5"
    }
   ]
  },
  "createNic4": {
   "Fn::Or": [
    {
     "Condition": "2"
    },
    {
     "Condition": "3"
    },
    {
     "Condition": "4"
    },
    {
     "Condition": "5"
    }
   ]
  },
  "createNic5": {
   "Fn::Or": [
    {
     "Condition": "3"
    },
    {
     "Condition": "4"
    },
    {
     "Condition": "5"
    }
   ]
  },
  "createNic6": {
   "Fn::Or": [
    {
     "Condition": "4"
    },
    {
     "Condition": "5"
    }
   ]
  },
  "createNic7": {
   "Condition": "5"
  },
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "useChinaRegion": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "cn-north-1",
      {
       "Ref": "AWS::Region"
      }
     ]
    },
    {
     "Fn::Equals": [
      "cn-northwest-1",
      {
       "Ref": "AWS::Region"
      }
     ]
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.7.1: AWS CloudFormation Template for creating a 8NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
  "ap-east-1": {
    "AllOneBootLocation": "ami-0a2f3430a53a73c96",
    "AllTwoBootLocations": "ami-06199d4ed115eac71",
    "LTMOneBootLocation": "ami-067faa2a383c893de",
    "LTMTwoBootLocations": "ami-085b4f10cc5b26bc2"
  },
  "ap-northeast-1": {
    "AllOneBootLocation": "ami-0d6bff7507538225e",
    "AllTwoBootLocations": "ami-091c33b7dd3880747",
    "LTMOneBootLocation": "ami-01ef3b6a809971961",
    "LTMTwoBootLocations": "ami-0f1c0953567a19d1a"
  },
  "ap-northeast-2": {
    "AllOneBootLocation": "ami-01314fb17ee7cdc9e",
    "AllTwoBootLocations": "ami-04a7f69a4ad6fd245",
    "LTMOneBootLocation": "ami-0dd899493392a0f9a",
    "LTMTwoBootLocations": "ami-07424919e0e6f63a1"
  },
  "ap-south-1": {
    "AllOneBootLocation": "ami-056ff2c9c7e41822c",
    "AllTwoBootLocations": "ami-0c977553de14482fb",
    "LTMOneBootLocation": "ami-01e04a02ef6cd08a0",
    "LTMTwoBootLocations": "ami-01b6b387cd4c1f838"
  },
  "ap-southeast-1": {
    "AllOneBootLocation": "ami-0860cc719efcb57c2",
    "AllTwoBootLocations": "ami-033924af1e8f8e131",
    "LTMOneBootLocation": "ami-0478406eeb6444aa5",
    "LTMTwoBootLocations": "ami-0e4e774cd85a169b3"
  },
  "ap-southeast-2": {
    "AllOneBootLocation": "ami-00f2748df4cd8feda",
    "AllTwoBootLocations": "ami-05fd245399cd6dca9",
    "LTMOneBootLocation": "ami-054d3b9a3764a7581",
    "LTMTwoBootLocations": "ami-0c28c5582b43909a9"
  },
  "ca-central-1": {
    "AllOneBootLocation": "ami-0f48a966350db8de6",
    "AllTwoBootLocations": "ami-020551674df4f17cb",
    "LTMOneBootLocation": "ami-0f22ee2857950c855",
    "LTMTwoBootLocations": "ami-0e07a489b5e4031f2"
  },
  "eu-central-1": {
    "AllOneBootLocation": "ami-07f230751f3850236",
    "AllTwoBootLocations": "ami-09c4b07312a99f4ad",
    "LTMOneBootLocation": "ami-01ebb96896f61e242",
    "LTMTwoBootLocations": "ami-0c919346ff3c81ee4"
  },
  "eu-north-1": {
    "AllOneBootLocation": "ami-08070ff3cb9a44b81",
    "AllTwoBootLocations": "ami-017c4a193a23d9480",
    "LTMOneBootLocation": "ami-09968b9ad3b4d3f3d",
    "LTMTwoBootLocations": "ami-098ab585923b99062"
  },
  "eu-west-1": {
    "AllOneBootLocation": "ami-0f698094e27a365ac",
    "AllTwoBootLocations": "ami-008096288263d637b",
    "LTMOneBootLocation": "ami-0a02dcaf630ac57d4",
    "LTMTwoBootLocations": "ami-086671bf3ffb51d08"
  },
  "eu-west-2": {
    "AllOneBootLocation": "ami-0f79d2d10724ecc62",
    "AllTwoBootLocations": "ami-006d2aeed9b599b53",
    "LTMOneBootLocation": "ami-03aab01ff6a304901",
    "LTMTwoBootLocations": "ami-0fb28fb4553437e2f"
  },
  "eu-west-3": {
    "AllOneBootLocation": "ami-0d932c410b0e83264",
    "AllTwoBootLocations": "ami-0e8e2fb9cd1736d77",
    "LTMOneBootLocation": "ami-0cdb0cec5c8411018",
    "LTMTwoBootLocations": "ami-0e69799ab7f4e35fb"
  },
  "me-south-1": {
    "AllOneBootLocation": "ami-0a438e68496416d10",
    "AllTwoBootLocations": "ami-04644d206c2766389",
    "LTMOneBootLocation": "ami-009cde3d092c51ab4",
    "LTMTwoBootLocations": "ami-0dceec7ff481bb667"
  },
  "sa-east-1": {
    "AllOneBootLocation": "ami-0e4f03b39dedfeaa8",
    "AllTwoBootLocations": "ami-06daceced07663a6e",
    "LTMOneBootLocation": "ami-009bbc27d340f4a66",
    "LTMTwoBootLocations": "ami-05e9163cab8c7121f"
  },
  "us-east-1": {
    "AllOneBootLocation": "ami-01a8cbb8c7108f017",
    "AllTwoBootLocations": "ami-0776afb1da981638c",
    "LTMOneBootLocation": "ami-0074df3e40b72cda5",
    "LTMTwoBootLocations": "ami-0e769281726af0860"
  },
  "us-east-2": {
    "AllOneBootLocation": "ami-05cda0a2c0b7f74ea",
    "AllTwoBootLocations": "ami-071578b4fd2f65e77",
    "LTMOneBootLocation": "ami-08231440d1a4a4924",
    "LTMTwoBootLocations": "ami-05c8f96b41ef21e62"
  },
  "us-gov-east-1": {
    "AllOneBootLocation": "ami-08663e7141bdec748",
    "AllTwoBootLocations": "ami-02df0e1f9270bb998",
    "LTMOneBootLocation": "ami-0e0fd8f3d369b3646",
    "LTMTwoBootLocations": "ami-0410be0179cc6bba3"
  },
  "us-gov-west-1": {
    "AllOneBootLocation": "ami-0d89439d62c5294e9",
    "AllTwoBootLocations": "ami-07b8fe577cfce4b53",
    "LTMOneBootLocation": "ami-0025f9c981c5cfee1",
    "LTMTwoBootLocations": "ami-06020fc69d44dd944"
  },
  "us-west-1": {
    "AllOneBootLocation": "ami-0fdc498afb01d62e6",
    "AllTwoBootLocations": "ami-0b691ea233ab7c14c",
    "LTMOneBootLocation": "ami-0f4150f448f579c3f",
    "LTMTwoBootLocations": "ami-0273dd59c11597b09"
  },
  "us-west-2": {
    "AllOneBootLocation": "ami-0919dcdf63c0d3ccd",
    "AllTwoBootLocations": "ami-0cf97b09acdbd6dd2",
    "LTMOneBootLocation": "ami-0ae4b0fe97db614af",
    "LTMTwoBootLocations": "ami-0247f96dceeaaa9a4"
  }
  }
},
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "5.7.1"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1Interface3": {
   "Condition": "createNic3",
   "Description": "Interface3 ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1Interface3"
   }
  },
  "Bigip1Interface3PrivateIp": {
   "Condition": "createNic3",
   "Description": "Internally routable IP of interface3 on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Interface3",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Interface4": {
   "Condition": "createNic4",
   "Description": "Interface4 ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1Interface4"
   }
  },
  "Bigip1Interface4PrivateIp": {
   "Condition": "createNic4",
   "Description": "Internally routable IP of interface4 on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Interface4",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Interface5": {
   "Condition": "createNic5",
   "Description": "Interface5 ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1Interface5"
   }
  },
  "Bigip1Interface5PrivateIp": {
   "Condition": "createNic5",
   "Description": "Internally routable IP of interface5 on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Interface5",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Interface6": {
   "Condition": "createNic6",
   "Description": "Interface6 ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1Interface6"
   }
  },
  "Bigip1Interface6PrivateIp": {
   "Condition": "createNic6",
   "Description": "Internally routable IP of interface6 on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Interface6",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Interface7": {
   "Condition": "createNic7",
   "Description": "Interface7 ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1Interface7"
   }
  },
  "Bigip1Interface7PrivateIp": {
   "Condition": "createNic7",
   "Description": "Internally routable IP of interface7 on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Interface7",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InternalInterface": {
   "Description": "Internal interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1InternalInterface"
   }
  },
  "Bigip1InternalInterfacePrivateIp": {
   "Description": "Internally routable IP of internal interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1InternalInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementInterface"
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Condition": "usePublicIP",
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Description": "VIP on External Interface Secondary IP 1",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1Interface"
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipInternalSecurityGroup": {
   "Description": "Private or Internal Security Group",
   "Value": {
    "Ref": "bigipInternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "additionalNicLocation": {
   "Description": "This parameter specifies where the additional NICs should go.  This value must be a comma delimited string of subnets, equal to the number of additional NICs you are deploying.  For example, for 2 additional NICs: **subnet01,subnet02**. NOTE: Ensure that there are no spaces and that the correct number of subnets are provided based on the value you specify in the **Number of Additional NICs** field. IMPORTANT: The subnet you provide for each additional NIC MUST be unique.",
   "Type": "CommaDelimitedList"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "AllOneBootLocation",
    "AllTwoBootLocations",
    "LTMOneBootLocation",
    "LTMTwoBootLocations"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "AllTwoBootLocations",
   "Description": "Image names starting with All have all BIG-IP modules available. Image names starting with LTM have only the LTM module available.  Use Two Boot Locations if you expect to upgrade the BIG-IP VE in the future (the Two Boot Location options are only applicable to BIG-IP v13.1.1 or later). If you do not need room to upgrade (if you intend to create a new instance when a new version of BIG-IP VE is released), use one Boot Location.",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.12xlarge",
    "m5.4xlarge",
    "m4.4xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "cc2.8xlarge",
    "c5.9xlarge",
    "c5.4xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.4xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "licenseKey1": {
   "AllowedPattern": "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
   "ConstraintDescription": "Verify your F5 BYOL regkey.",
   "Description": "F5 BYOL license key",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "numberOfAdditionalNics": {
   "ConstraintDescription": "Must be a number between 1-5.",
   "Default": "1",
   "Description": "By default this solution deploys the BIG-IP in a 3 NIC configuration, however it can also add a select number (1-5) of additional NICs to the BIG-IP using this parameter",
   "MaxValue": "5",
   "MinValue": "1",
   "Type": "Number"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet2Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Private or Internal subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 500"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user admin",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "GATEWAY_MAC2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`\n",
           "GATEWAY_CIDR_BLOCK2=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
           {
            "Fn::If": [
             "createNic3",
             "GATEWAY_MAC3=`ifconfig eth3 | egrep ether | awk '{print tolower($2)}'`;GATEWAY_CIDR_BLOCK3=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC3}/subnet-ipv4-cidr-block`;GATEWAY_PREFIX3=${GATEWAY_CIDR_BLOCK3#*/};",
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic4",
             "GATEWAY_MAC4=`ifconfig eth4 | egrep ether | awk '{print tolower($2)}'`;GATEWAY_CIDR_BLOCK4=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC4}/subnet-ipv4-cidr-block`;GATEWAY_PREFIX4=${GATEWAY_CIDR_BLOCK4#*/};",
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic5",
             "GATEWAY_MAC5=`ifconfig eth5 | egrep ether | awk '{print tolower($2)}'`;GATEWAY_CIDR_BLOCK5=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC5}/subnet-ipv4-cidr-block`;GATEWAY_PREFIX5=${GATEWAY_CIDR_BLOCK5#*/};",
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic6",
             "GATEWAY_MAC6=`ifconfig eth6 | egrep ether | awk '{print tolower($2)}'`;GATEWAY_CIDR_BLOCK6=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC6}/subnet-ipv4-cidr-block`;GATEWAY_PREFIX6=${GATEWAY_CIDR_BLOCK6#*/};",
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic7",
             "GATEWAY_MAC7=`ifconfig eth7 | egrep ether | awk '{print tolower($2)}'`;GATEWAY_CIDR_BLOCK7=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC7}/subnet-ipv4-cidr-block`;GATEWAY_PREFIX7=${GATEWAY_CIDR_BLOCK7#*/};",
             ""
            ]
           },
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "--user admin ",
           "--password-url file:///config/cloud/aws/.adminPassword ",
           "--password-encrypted ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/${GATEWAY_PREFIX},vlan:external ",
           "--vlan name:internal,nic:1.2 ",
           "--self-ip name:internal-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1InternalInterface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/${GATEWAY_PREFIX2},vlan:internal ",
           {
            "Fn::If": [
             "createNic3",
             {
              "Fn::Join": [
               "",
               [
                "--vlan name:net3,nic:1.3 ",
                "--self-ip name:interface3-self,address:",
                {
                 "Fn::GetAtt": [
                  "Bigip1Interface3",
                  "PrimaryPrivateIpAddress"
                 ]
                },
                "/${GATEWAY_PREFIX3},vlan:net3 "
               ]
              ]
             },
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic4",
             {
              "Fn::Join": [
               "",
               [
                "--vlan name:net4,nic:1.4 ",
                "--self-ip name:interface4-self,address:",
                {
                 "Fn::GetAtt": [
                  "Bigip1Interface4",
                  "PrimaryPrivateIpAddress"
                 ]
                },
                "/${GATEWAY_PREFIX4},vlan:net4 "
               ]
              ]
             },
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic5",
             {
              "Fn::Join": [
               "",
               [
                "--vlan name:net5,nic:1.5 ",
                "--self-ip name:interface5-self,address:",
                {
                 "Fn::GetAtt": [
                  "Bigip1Interface5",
                  "PrimaryPrivateIpAddress"
                 ]
                },
                "/${GATEWAY_PREFIX5},vlan:net5 "
               ]
              ]
             },
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic6",
             {
              "Fn::Join": [
               "",
               [
                "--vlan name:net6,nic:1.6 ",
                "--self-ip name:interface6-self,address:",
                {
                 "Fn::GetAtt": [
                  "Bigip1Interface6",
                  "PrimaryPrivateIpAddress"
                 ]
                },
                "/${GATEWAY_PREFIX6},vlan:net6 "
               ]
              ]
             },
             ""
            ]
           },
           {
            "Fn::If": [
             "createNic7",
             {
              "Fn::Join": [
               "",
               [
                "--vlan name:net7,nic:1.7 ",
                "--self-ip name:interface7-self,address:",
                {
                 "Fn::GetAtt": [
                  "Bigip1Interface7",
                  "PrimaryPrivateIpAddress"
                 ]
                },
                "/${GATEWAY_PREFIX7},vlan:net7 "
               ]
              ]
             },
             ""
            ]
           },
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license ",
             {
              "Ref": "licenseKey1"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:15.1.0.4-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-byol-n-nic-bigip.template,templateVersion:5.7.1,licenseType:byol\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license ",
             {
              "Ref": "licenseKey1"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/cloud/aws/rm-password.log",
           "--log-level silly",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.7.1\n",
           "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='admin'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "managementGuiPort='443'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": {
         "Fn::If": [
          "useChinaRegion",
          "https://f5-cft.s3.cn-north-1.amazonaws.com.cn/assets/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm",
          "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm"
         ]
        }
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": {
         "Fn::If": [
          "useChinaRegion",
          "https://f5-cft.s3.cn-north-1.amazonaws.com.cn/assets/f5-cloud-libs-aws/v2.9.0/f5-cloud-libs-aws.tar.gz",
          "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.9.0/f5-cloud-libs-aws.tar.gz"
         ]
        }
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": {
         "Fn::If": [
          "useChinaRegion",
          "https://f5-cft.s3.cn-north-1.amazonaws.com.cn/assets/f5-cloud-libs/v4.22.0/f5-cloud-libs.tar.gz",
          "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.22.0/f5-cloud-libs.tar.gz"
         ]
        }
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm\" )",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) e688cb153416abc85da081dd09d2dd4fd433c29f197fd927c12afa9e0d44699280b48a2ae93f19361dd0c3cdb72823205ed037ef0a10f7cfbef09f399aa620c8\n            set hashes(f5-cloud-libs-aws.tar.gz) fefa76ffe9e2c36d3b36b12f7c5a51f1fb8265221d000afafd113af07cbda30717bda03b26c9e10c636344a735e7ee59d8de172c6b970bcc24e161cdf01d354f\n            set hashes(f5-cloud-libs-azure.tar.gz) fa0d27d2cd69f965dcdc0dd79bb85baad47686af19a2013db2ee7fb486a0ccbd1072c3a34ef4553c28fe7387665e36557134cf6d4e221f2392f0b11eaf9bcbaf\n            set hashes(f5-cloud-libs-gce.tar.gz) e8f935a70aff0dbd19b8967c4ea35ca8027ff5657d929923aca971394370a269f4cbb960dd506abd34a36d82de0b3442e2f63c079c53cf1f0f023da110309cb6\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature BrPhvwDOJwEvfJsM25Xnkf9/VmDMar4n91RG8Zp7Oc5DzYCYdYlAXVxV2goRPUq5J/1nfTwFCL+9SuZk8jiafGbXOj03xsFxRrShuIGxvu4tpVxIJbTCawPnybr6b16ShQVSckaigdstiYfh0kaGwM6qNeww+Dlu54va1ZkVNrZgEQULy2lyuCZ86qOOFxgpHPCVSrL0DKu1R1EgjoQwwHHohv9uANmSwNRShVb9AwrxItck5qnnR28zWirPXpvR4PXU4NUgw2gqhYeuGUi1TWG+tIBSMNVgqKu+rsjEPTxnllYsy2HGl2aSJHHXVpx7VpfaFmb8xPCbt2VTBjTWbA==\n    signing-key /Common/f5-irule\n}\n",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": "true",
       "VolumeSize": "100",
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip1subnet1Az1Interface"
      }
     },
     {
      "Description": "Private or Internal Interface",
      "DeviceIndex": "2",
      "NetworkInterfaceId": {
       "Ref": "Bigip1InternalInterface"
      }
     },
     {
      "Fn::If": [
       "createNic3",
       {
        "Description": "Interface 3",
        "DeviceIndex": "3",
        "NetworkInterfaceId": {
         "Ref": "Bigip1Interface3"
        }
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     {
      "Fn::If": [
       "createNic4",
       {
        "Description": "Interface 4",
        "DeviceIndex": "4",
        "NetworkInterfaceId": {
         "Ref": "Bigip1Interface4"
        }
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     {
      "Fn::If": [
       "createNic5",
       {
        "Description": "Interface 5",
        "DeviceIndex": "5",
        "NetworkInterfaceId": {
         "Ref": "Bigip1Interface5"
        }
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     {
      "Fn::If": [
       "createNic6",
       {
        "Description": "Interface 6",
        "DeviceIndex": "6",
        "NetworkInterfaceId": {
         "Ref": "Bigip1Interface6"
        }
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     {
      "Fn::If": [
       "createNic7",
       {
        "Description": "Interface 7",
        "DeviceIndex": "7",
        "NetworkInterfaceId": {
         "Ref": "Bigip1Interface7"
        }
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1Interface3": {
   "Condition": "createNic3",
   "Properties": {
    "Description": "Interface 3 for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Fn::Select": [
      "0",
      {
       "Ref": "additionalNicLocation"
      }
     ]
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Interface4": {
   "Condition": "createNic4",
   "Properties": {
    "Description": "Interface 4 for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Fn::Select": [
      "1",
      {
       "Ref": "additionalNicLocation"
      }
     ]
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Interface5": {
   "Condition": "createNic5",
   "Properties": {
    "Description": "Interface 5 for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Fn::Select": [
      "2",
      {
       "Ref": "additionalNicLocation"
      }
     ]
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Interface6": {
   "Condition": "createNic6",
   "Properties": {
    "Description": "Interface 6 for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Fn::Select": [
      "3",
      {
       "Ref": "additionalNicLocation"
      }
     ]
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Interface7": {
   "Condition": "createNic7",
   "Properties": {
    "Description": "Interface 7 for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Fn::Select": [
      "4",
      {
       "Ref": "additionalNicLocation"
      }
     ]
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1InternalInterface": {
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::Select": [
      "0",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "SecondaryPrivateIpAddresses"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": "1",
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "80",
      "IpProtocol": "tcp",
      "ToPort": "80"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipInternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Allow All from Intra-VPC only",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Internal Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         {
          "Fn::If": [
           "useChinaRegion",
           "ec2.amazonaws.com.cn",
           "ec2.amazonaws.com"
          ]
         }
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:ReplaceRoute",
          "ec2:assignprivateipaddresses",
          "sts:AssumeRole"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
